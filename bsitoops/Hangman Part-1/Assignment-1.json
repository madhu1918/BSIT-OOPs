[{
	"activityType":"assignment",
	"title":"Implement isWordGuessed and getGuessedWord functions",
	"questions":
	[
		{
			"questionType":"filesubmission",
			"questionText":
			[
				{
					"text":"<b>Description:</b><br>Please read the Hangman Introduction before starting this problem. We'll start by writing 3 simple functions that will help us easily code the Hangman problem. First, implement the function <b>isWordGuessed</b> that takes in two parameters - a string, secretWord, and a list of letters, lettersGuessed. This function returns a boolean - True if secretWord has been guessed (ie, all the letters of secretWord are in lettersGuessed) and False otherwise.<br><b>Example Usage:</b>"
				},
				{
					"text" : "    <code>String secretWord = \"apple\";<br>    char[] lettersGuessed = {'e', 'i', 'k', 'p', 'r', 's'};<br>    System.out.println(isWordGuessed(secretWord,lettersGuessed))<br>    false</code>"
				},
				{
					"text":"For this function, you may assume that all the letters in secretWord and lettersGuessed are lowercase."
				},
				{
					"text":"<b>Description:</b><br>Next, implement the function <b>getGuessedWord</b> that takes in two parameters - a string, secretWord, and a list of letters, lettersGuessed. This function returns a string that is comprised of letters and underscores, based on what letters in lettersGuessed are in secretWord. This shouldn't be too different from isWordGuessed!<br><b>Example Usage:</b>"
				},
				{
					"text" : "    <code>String secretWord = \"apple\";<br>    char[] lettersGuessed = {'e', 'i', 'k', 'p', 'r', 's'};<br>    System.out.println(getGuessedWord(secretWord, lettersGuessed))<br>    '_ pp_ e'</code>"
				},
				{
					"text":"When inserting underscores into your string, it's a good idea to add at least a space after each one, so it's clear to the user how many unguessed letters are left in the string (compare the readability of ____ with _ _ _ _ ). This is called usability - it's very important, when programming, to consider the usability of your program. If users find your program difficult to understand or operate, they won't use it!<br>For this problem, you are free to use spacing in any way you wish - our grader will only check that the letters and underscores are in the proper order; it will not look at spacing. We do encourage you to think about usability when designing.<br>For this function, you may assume that all the letters in secretWord and lettersGuessed are lowercase."
				}
			]
		}
	]
}]